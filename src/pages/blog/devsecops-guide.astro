---
title: "Guide DevSecOps"
date: "2024-07-20"
description: "Mettre en œuvre la sécurité dès le développement avec DevSecOps et CI/CD."
tags:
  - devsecops
  - sécurité
  - ci
  - cd
---
import Layout from '../../layouts/Layout.astro';
import Footer from '../../components/Footer.astro';

<Layout title="Guide DevSecOps : Sécurité dans les pipelines CI/CD" description="Mettre en œuvre la sécurité dès le développement avec DevSecOps et CI/CD.">

  <section>
    <h1>Guide DevSecOps : Sécurité dans les pipelines CI/CD</h1>
    <p>
      La sécurité applicative ne doit plus être un simple ajout en fin de projet. Avec l’approche <strong>DevSecOps</strong>, la sécurité est intégrée dès le début du cycle de vie du logiciel, notamment dans les <strong>pipelines CI/CD</strong>. Ce guide vous explique comment intégrer et automatiser les bonnes pratiques pour sécuriser vos développements.
    </p>
  </section>

  <section>
    <h2>Pourquoi DevSecOps ?</h2>
    <ul>
      <li>Détecter tôt les vulnérabilités pour réduire le coût des corrections</li>
      <li>Automatiser les contrôles de sécurité sans ralentir les cycles de déploiement</li>
      <li>Sensibiliser les équipes à la sécurité de façon continue</li>
    </ul>
  </section>

  <section>
    <h2>Principes clés à intégrer dans vos pipelines</h2>
    <ul class="feature-list">
      <li><strong>Analyse de dépendances</strong> : Identifier les librairies vulnérables</li>
      <li><strong>Analyse statique (SAST)</strong> : Détecter les failles dans le code source</li>
      <li><strong>Analyse dynamique (DAST)</strong> : Tester l’application en fonctionnement</li>
      <li><strong>Analyse de configuration</strong> : Vérifier les paramètres d’infrastructure</li>
      <li><strong>Gestion des secrets</strong> : Empêcher la fuite de clés/API</li>
      <li><strong>Tests de conteneurs</strong> : Sécuriser vos images Docker</li>
    </ul>
  </section>

  <section>
    <h2>Exemple de pipeline CI/CD sécurisé (GitHub Actions)</h2>
    <pre><code class="language-yaml">name: CI Sécurisée

on: [push, pull_request]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installation des dépendances
        run: npm install

      - name: Analyse de dépendances (npm audit)
        run: npm audit --audit-level=high

      - name: Scan SAST avec CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Exécution de CodeQL
        uses: github/codeql-action/analyze@v3

      - name: Scan des secrets (GitHub Advanced Security)
        uses: github/secret-scanning@v1

      - name: Scan de l’image Docker (Trivy)
        run: |
          docker build -t myapp .
          docker run --rm aquasec/trivy image myapp
</code></pre>
  </section>

  <section>
    <h2>Outils recommandés</h2>
    <ul class="feature-list">
      <li><strong>npm audit</strong> : Scan natif pour les projets Node.js</li>
      <li><strong>Snyk</strong> : Plateforme complète pour tous les langages</li>
      <li><strong>OWASP Dependency Check</strong> : Solution open source</li>
      <li><strong>GitHub Dependabot</strong> : Intégration native GitHub</li>
      <li><strong>CodeQL</strong> : Analyse statique avancée</li>
      <li><strong>Trivy</strong> : Scans d’images Docker et de dépendances</li>
      <li><strong>GitLeaks</strong> : Détection de secrets dans le code</li>
    </ul>
  </section>

  <section>
    <h2>Bonnes pratiques pour la gestion des secrets</h2>
    <ul>
      <li>Ne jamais commiter de secrets en clair dans le dépôt</li>
      <li>Utiliser les variables chiffrées des plateformes CI/CD</li>
      <li>Mettre en place des outils de scan automatique de secrets (GitLeaks, truffleHog, GitHub Secret Scanning)</li>
      <li>Renouveler immédiatement tout secret exposé</li>
    </ul>
    <pre><code class="language-yaml"># Exemple de workflow pour vérifier l’absence de secrets avec GitLeaks
jobs:
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Scan secrets avec GitLeaks
        uses: gitleaks/gitleaks-action@v2
</code></pre>
  </section>

  <section>
    <h2>Exemple d’analyseur de dépendances avec Snyk</h2>
    <pre><code class="language-yaml">jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Snyk scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{'${{ secrets.SNYK_TOKEN }}'}}
</code></pre>
  </section>

  <section>
    <h2>Sécurité des images Docker</h2>
    <ul>
      <li>Utiliser des images de base officielles et minimalistes</li>
      <li>Scanner les images à chaque build (Trivy, Grype...)</li>
      <li>Éviter d’exposer des ports ou fichiers inutiles</li>
      <li>Configurer des users non-root dans les Dockerfile</li>
    </ul>
    <pre><code class="language-dockerfile">FROM node:20-alpine
WORKDIR /app
COPY . .
RUN npm ci --only=production
USER node
CMD ["node", "index.js"]
</code></pre>
    <pre><code class="language-yaml"># Scan de l’image après build
jobs:
  trivy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t myapp:${'${{ github.sha }}'} .
      - name: Scan image
        uses: aquasec/trivy-action@master
        with:
          image-ref: 'myapp:${'${{ github.sha }}'}'
</code></pre>
  </section>

  <section>
    <h2>Aller plus loin : DAST et Infrastructure as Code</h2>
    <ul>
      <li>DAST : tester l’application déployée avec ZAP, Burp Suite…</li>
      <li>Scanner les fichiers IaC (Terraform, CloudFormation) : Checkov, TFSec…</li>
      <li>Automatiser l’application de correctifs suite aux alertes</li>
      <li>Mettre en place une surveillance continue (monitoring, alerting, SIEM…)</li>
    </ul>
  </section>

  <section>
    <h2>Conclusion</h2>
    <p>
      Mettre en place un pipeline CI/CD sécurisé est indispensable pour livrer du code de qualité et prévenir les incidents de sécurité. L’automatisation des contrôles, la sensibilisation des équipes et l’utilisation d’outils adaptés sont les clés d’un DevSecOps réussi.
    </p>
  </section>

  <Footer />
</Layout>